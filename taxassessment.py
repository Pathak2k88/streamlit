# -*- coding: utf-8 -*-
"""TaxAssessment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RpbKQSgVqM6O4n7Re92q8udqeKpDwkIV
"""

# cleaning data in excel and adding Range Column in Investment Accounts
import numpy as np
from dateutil import relativedelta
import pandas as pd
import streamlit as st
df_IA=pd.read_excel('investment_accounts.xlsx')
df_IA['INVESTMENTSTARTDATE'] = pd.to_datetime(df_IA['INVESTMENTSTARTDATE']).dt.date
df_IA['INVESTMENTENDDATE'] = pd.to_datetime(df_IA['INVESTMENTENDDATE']).dt.date
df_IA= df_IA.loc[df_IA['INVESTMENTENDDATE']> df_IA['INVESTMENTSTARTDATE']]

df_IA['DURATION']=round((df_IA['INVESTMENTENDDATE']-df_IA['INVESTMENTSTARTDATE'])/  pd.Timedelta('30D'))

#print(df_IA.head())

def condition(x):
    if x>0 and x<6:
        return "1-6 months"
    elif x>=6 and x<=12:
        return "6-12 months"
    elif x>=13 and x<=24:
        return "1-2 years"
    elif x>=25 and x<=36:
        return "2-3 years"
    elif x>=37 and x<=48:
        return "3-4 years"

    else:
        return '4-5 years'
##dataset['Range'] = dataset[dataset['DURATION'] > 0 & dataset['DURATION'] < 6]
df_IA['Range']= df_IA['DURATION'].apply(condition)
#print(df_IA.head())

import numpy as np
dict_MF={}
dict_Stocks={}
dict_FD={}
#print(df_IA['CUSTOMERID'].unique())
cust_Ids = df_IA['CUSTOMERID'].unique()
Invids =[]
df_new = df_IA.loc[df_IA['CUSTOMERID'] == 1193]
dataset_MF = df_IA.loc[df_IA['ACCOUNTTYPE']== 'Mutual Funds']
cust_IdsMF = dataset_MF['CUSTOMERID'].unique()
#print(cust_IdsMF)
#dataset_MF.query("CUSTOMERID== i")["RETURNS"]
#print(df_new['INVESTMENTACCOUNTID'].unique()),'Mutual Funds'
#dict[1193] = df_new['INVESTMENTACCOUNTID'].unique().tolist()
df_MF=pd.read_excel('mutual_funds.xlsx')
dataset_Stocks = df_IA.loc[df_IA['ACCOUNTTYPE']=='Stocks']
dataset_FD = df_IA.loc[df_IA['ACCOUNTTYPE']=='Fixed Deposits']
cust_IdsStocks = dataset_Stocks['CUSTOMERID'].unique()
cust_IdsFD = dataset_FD['CUSTOMERID'].unique()

for i in cust_IdsMF:


  df_new = df_IA.loc[df_IA['CUSTOMERID'] == i]


  dict_MF[i]=df_new['INVESTMENTACCOUNTID'].unique().tolist()



#print(dict_MF)
for i in cust_IdsStocks:


  df_new = df_IA.loc[df_IA['CUSTOMERID'] == i]


  dict_Stocks[i]=df_new['INVESTMENTACCOUNTID'].unique().tolist()



#print(dict_Stocks)
for i in cust_IdsFD:


  df_new = df_IA.loc[df_IA['CUSTOMERID'] == i]


  dict_FD[i]=df_new['INVESTMENTACCOUNTID'].unique().tolist()



print(dict_FD)
dict_MF_tax={}
for key in dict_MF:
  a=[]
  for i in dict_MF[key]:
    investmentamount=0



    if (not df_MF[df_MF['INVESTMENTACCOUNTID'] == i].isnull().values.any()) and  (not df_MF[df_MF['INVESTMENTACCOUNTID'] == i].empty):
       for index,value in enumerate(df_MF[df_MF['INVESTMENTACCOUNTID'] == i]['INVESTMENTAMOUNT'].tolist()):
        investmentamount=investmentamount+df_MF[df_MF['INVESTMENTACCOUNTID'] == i]['INVESTMENTAMOUNT'].values[index]






    #Returns = df_IA['RETURNS'].values[idx2]
    Returns =  df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['RETURNS'].values[0]
    #Returns = df_IA.at[idx2, "RETURNS"], df.loc[3, 'age']
    investmentduration = round((df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['DURATION'].values[0])/12,2)
    worth = investmentamount*(1+Returns/100)**investmentduration
    profit = worth - investmentamount
    tax=0
    investmentduration_months=df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['DURATION'].values[0]
    if(investmentduration_months<12):
      tax = profit*0.15
    else:
      if(profit>100000):
        tax = (profit-100000)*0.1
      else:
        tax=0









    a.append(tax)


  dict_MF_tax[key] = sum(a)

#print(dict_MF_tax)

import plotly.express as px
df_MF = pd.DataFrame(list(dict_MF_tax.items()), columns=['CustomerId', 'MutualFundTaxValue'])
#print(df_MF)
df_MF = df_MF.sort_values(by='MutualFundTaxValue', ascending=False).head(10)
#print(df_MF)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_MF, x='CustomerId', y='MutualFundTaxValue', color='MutualFundTaxValue', labels={'MutualFundTaxValue': 'MutualFundTaxValue'})
fig.update_layout(title='Mutual Fund Tax Liability of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Mutual Fund Tax Value',
                  xaxis={'type': 'category'})

st.plotly_chart(fig,use_container_width=True)

dict_Stocks_tax={}
import pandas as pd
df_Stocks=pd.read_excel('stocks.xlsx')
from datetime import datetime
# Get the current date and time
current_date = datetime.now().date()
today = datetime.now().date()
#df_IA['INVESTMENTSTARTDATE'] = pd.to_datetime(df_IA['INVESTMENTSTARTDATE']).dt.date
# Step 2: Obtain the given date (replace 'YYYY-MM-DD' with the desired date)
df_Stocks['PURCHASEDATE'] = pd.to_datetime(df_Stocks['PURCHASEDATE']).dt.date
for key in dict_Stocks:
  a=[]
  for i in dict_Stocks[key]:
    ## find all investments for this investmentaccountid,given_date = datetime.strptime('2023-01-01', '%Y-%m-%d').date()


    investmentamount=0
    if (not df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i].isnull().values.any()) and  (not df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i].empty):
      for index,value in enumerate(df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['PURCHASEPRICE'].tolist()):

        investmentamount=investmentamount+(df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['PURCHASEPRICE'].values[index])*(df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['QUANTITY'].values[index])

        given_date = df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['PURCHASEDATE'].values[index]



    #Returns = df_IA['RETURNS'].values[idx2]
    Returns =  df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['RETURNS'].values[0]

    investmentduration = round((current_date -given_date).days/365,2)
    worth =round(investmentamount*(1+Returns/100)**investmentduration,2)
    profit = worth - investmentamount
    tax=0
    investmentduration_months=round((current_date -given_date).days/30,2)
    if(investmentduration_months<12):
      tax = profit*0.15
    else:
      if(profit>100000):
        tax = (profit-100000)*0.1
      else:
        tax=0


    a.append(tax)
  dict_Stocks_tax[key] = sum(a)
#print(dict_Stocks_tax)

import plotly.express as px
df_Stocks = pd.DataFrame(list(dict_Stocks_tax.items()), columns=['CustomerId', 'StockTaxValue'])
#print(df_Stocks)
df_Stocks = df_Stocks.sort_values(by='StockTaxValue', ascending=False).head(10)
#print(df_Stocks)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_Stocks, x='CustomerId', y='StockTaxValue', color='StockTaxValue', labels={'StockTaxValue': 'StockTaxValue'})
fig.update_layout(title='StockTax Value of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='StockTax Value',
                  xaxis={'type': 'category'})
st.plotly_chart(fig,use_container_width=True)
# determine worth of FDs
import pandas as pd
dict_FD_tax={}
df_FD=pd.read_excel('fixed_deposits.xlsx')
b = df_FD['INVESTMENTACCOUNTID'].tolist()
for key in dict_FD:
  a=[]
  for i in dict_FD[key]:
    maturityamount=0
    if (not df_FD[df_FD['INVESTMENTACCOUNTID'] == i].isnull().values.any()) and  (not df_FD[df_FD['INVESTMENTACCOUNTID'] == i].empty):
        for index,value in enumerate(df_FD[df_FD['INVESTMENTACCOUNTID'] == i]['MATURITYAMOUNT'].tolist()):

          maturityamount=maturityamount+(df_FD[df_FD['INVESTMENTACCOUNTID'] == i]['MATURITYAMOUNT'].values[index])
          principalamount= df_FD[df_FD['INVESTMENTACCOUNTID'] == i]['PRINCIPALAMOUNT'].values[index]
          profit = maturityamount - principalamount
          tax= profit*0.1
          #investmentduration_months=df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['DURATION'].values[0]


  a.append(tax)



  dict_FD_tax[key] = sum(a)
#print(dict_FD_tax)

import plotly.express as px
df_FD = pd.DataFrame(list(dict_FD_tax.items()), columns=['CustomerId', 'FixedDepositTax'])
#print(df_FD)
df_FD = df_FD.sort_values(by='FixedDepositTax', ascending=False).head(10)
#print(df_FD)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_FD, x='CustomerId', y='FixedDepositTax', color='FixedDepositTax', labels={'FixedDepositTax': 'FixedDepositTax'})
fig.update_layout(title='FixedDepositTax Value of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Fixed Deposit Tax Value',
                  xaxis={'type': 'category'})

st.plotly_chart(fig,use_container_width=True)
total_net_tax={}
cust_IdList = df_IA['CUSTOMERID'].tolist()
#cust_IdList = cust_IdList.remove(1193).tolist()
for i in cust_IdList:

  total_net_tax[i]=0
  if  dict_MF_tax.get(i,''):

    total_net_tax[i]=total_net_tax[i]+float(dict_MF_tax[i])


  if  dict_Stocks_tax.get(i,''):
    total_net_tax[i] = total_net_tax[i]+float(dict_Stocks_tax[i]);

  if  dict_FD_tax.get(i,''):
    total_net_tax[i] = total_net_tax[i]+float(dict_FD_tax[i]);






  total_net_tax[i] = round( total_net_tax[i],2)
#print(total_net_tax)

import plotly.express as px
df = pd.DataFrame(list(total_net_tax.items()), columns=['CustomerId', 'NetTax'])
#print(df)
df_sorted = df.sort_values(by='NetTax', ascending=False).head(10)
#print(df_sorted)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_sorted, x='CustomerId', y='NetTax', color='NetTax', labels={'NetTax': 'Net Tax'})
fig.update_layout(title='Net Tax of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Net Tax',
                  xaxis={'type': 'category'})


st.plotly_chart(fig,use_container_width=True)
#fig.show()



# dataset_MF = df_IA.loc[df_IA['ACCOUNTTYPE']== 'Mutual Funds']
# dataset_Stocks = df_IA.loc[df_IA['ACCOUNTTYPE']=='Stocks']
# dataset_FD = df_IA.loc[df_IA['ACCOUNTTYPE']=='Fixed Deposits']

# Investment_Duration_Range = ['1-6 months','6-12 months','1-2 years','2-3 years','3-4 years','4-5 years']
# Investments=['MF','Stocks','FD']
# print(dataset_MF.head())

## find all investment account ids, returns,investment type from investment accounts for a given customer id

##{cid:[Id1,IId2]}
##{Id1:'Stocks','returns%'}



