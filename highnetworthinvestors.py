# -*- coding: utf-8 -*-
"""HighNetWorthInvestors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AAGlV98SuUa3TmT0gHgsGtI38L3LG754
"""

# cleaning data in excel and adding Range Column in Investment Accounts
#!pip install streamlit
#import numpy as np
from dateutil import relativedelta
import pandas as pd
import streamlit as st
df_IA=pd.read_excel('investment_accounts.xlsx')
df_IA['INVESTMENTSTARTDATE'] = pd.to_datetime(df_IA['INVESTMENTSTARTDATE']).dt.date
df_IA['INVESTMENTENDDATE'] = pd.to_datetime(df_IA['INVESTMENTENDDATE']).dt.date
df_IA= df_IA.loc[df_IA['INVESTMENTENDDATE']> df_IA['INVESTMENTSTARTDATE']]

df_IA['DURATION']=round((df_IA['INVESTMENTENDDATE']-df_IA['INVESTMENTSTARTDATE'])/  pd.Timedelta('30D'))

#print(df_IA.head())

def condition(x):
    if x>0 and x<6:
        return "1-6 months"
    elif x>=6 and x<=12:
        return "6-12 months"
    elif x>=13 and x<=24:
        return "1-2 years"
    elif x>=25 and x<=36:
        return "2-3 years"
    elif x>=37 and x<=48:
        return "3-4 years"

    else:
        return '4-5 years'
##dataset['Range'] = dataset[dataset['DURATION'] > 0 & dataset['DURATION'] < 6]
df_IA['Range']= df_IA['DURATION'].apply(condition)
#print(df_IA.head())

import numpy as np
dict_MF={}
dict_Stocks={}
dict_FD={}
#print(df_IA['CUSTOMERID'].unique())
cust_Ids = df_IA['CUSTOMERID'].unique()
Invids =[]
df_new = df_IA.loc[df_IA['CUSTOMERID'] == 1193]
dataset_MF = df_IA.loc[df_IA['ACCOUNTTYPE']== 'Mutual Funds']
cust_IdsMF = dataset_MF['CUSTOMERID'].unique()
#print(cust_IdsMF)
#dataset_MF.query("CUSTOMERID== i")["RETURNS"]
#print(df_new['INVESTMENTACCOUNTID'].unique()),'Mutual Funds'
#dict[1193] = df_new['INVESTMENTACCOUNTID'].unique().tolist()
df_MF=pd.read_excel('mutual_funds.xlsx')
dataset_Stocks = df_IA.loc[df_IA['ACCOUNTTYPE']=='Stocks']
dataset_FD = df_IA.loc[df_IA['ACCOUNTTYPE']=='Fixed Deposits']
cust_IdsStocks = dataset_Stocks['CUSTOMERID'].unique()
cust_IdsFD = dataset_FD['CUSTOMERID'].unique()

for i in cust_IdsMF:


  df_new = df_IA.loc[df_IA['CUSTOMERID'] == i]


  dict_MF[i]=df_new['INVESTMENTACCOUNTID'].unique().tolist()



#print(dict_MF)
for i in cust_IdsStocks:


  df_new = df_IA.loc[df_IA['CUSTOMERID'] == i]


  dict_Stocks[i]=df_new['INVESTMENTACCOUNTID'].unique().tolist()



#print(dict_Stocks)
for i in cust_IdsFD:


  df_new = df_IA.loc[df_IA['CUSTOMERID'] == i]


  dict_FD[i]=df_new['INVESTMENTACCOUNTID'].unique().tolist()



#print(dict_FD)
dict_MF_worth={}
for key in dict_MF:
  a=[]
  for i in dict_MF[key]:
    investmentamount=0



    if (not df_MF[df_MF['INVESTMENTACCOUNTID'] == i].isnull().values.any()) and  (not df_MF[df_MF['INVESTMENTACCOUNTID'] == i].empty):
       for index,value in enumerate(df_MF[df_MF['INVESTMENTACCOUNTID'] == i]['INVESTMENTAMOUNT'].tolist()):
        investmentamount=investmentamount+df_MF[df_MF['INVESTMENTACCOUNTID'] == i]['INVESTMENTAMOUNT'].values[index]






    #Returns = df_IA['RETURNS'].values[idx2]
    Returns =  df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['RETURNS'].values[0]
    #Returns = df_IA.at[idx2, "RETURNS"], df.loc[3, 'age']
    investmentduration = round((df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['DURATION'].values[0])/12,2)
    worth = investmentamount*(1+Returns/100)**investmentduration









    a.append(worth)


  dict_MF_worth[key] = sum(a)
#print(dict_MF_worth)

st.markdown("Mutual fund Worth")
#df = pd.DataFrame(dict_MF_worth)
#df = df.set_index("CUSTOMERID")
#st.bar_chart(df)

import plotly.express as px
df_MF = pd.DataFrame(list(dict_MF_worth.items()), columns=['CustomerId', 'MutualFundValue'])
#print(df_MF)
df_MF = df_MF.sort_values(by='MutualFundValue', ascending=False).head(10)
#print(df_MF)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_MF, x='CustomerId', y='MutualFundValue', color='MutualFundValue', labels={'MutualFundValue': 'MutualFundValue'})
fig.update_layout(title='Mutual Fund Value of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='MutualFund Value',
                  xaxis={'type': 'category'})

st.plotly_chart(fig,use_container_width=True)

#plot_bottom_right()


dict_Stocks_worth={}
import pandas as pd
df_Stocks=pd.read_excel('stocks.xlsx')
from datetime import datetime
# Get the current date and time
current_date = datetime.now().date()
today = datetime.now().date()
#df_IA['INVESTMENTSTARTDATE'] = pd.to_datetime(df_IA['INVESTMENTSTARTDATE']).dt.date
# Step 2: Obtain the given date (replace 'YYYY-MM-DD' with the desired date)
df_Stocks['PURCHASEDATE'] = pd.to_datetime(df_Stocks['PURCHASEDATE']).dt.date
for key in dict_Stocks:
  a=[]
  for i in dict_Stocks[key]:
    ## find all investments for this investmentaccountid,given_date = datetime.strptime('2023-01-01', '%Y-%m-%d').date()


    investmentamount=0
    if (not df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i].isnull().values.any()) and  (not df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i].empty):
      for index,value in enumerate(df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['PURCHASEPRICE'].tolist()):

        investmentamount=investmentamount+(df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['PURCHASEPRICE'].values[index])*(df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['QUANTITY'].values[index])

        given_date = df_Stocks[df_Stocks['INVESTMENTACCOUNTID'] == i]['PURCHASEDATE'].values[index]



    #Returns = df_IA['RETURNS'].values[idx2]
    Returns =  df_IA[df_IA['INVESTMENTACCOUNTID'] == i]['RETURNS'].values[0]

    investmentduration = round((current_date -given_date).days/365,2)
    worth =round(investmentamount*(1+Returns/100)**investmentduration,2)

    a.append(worth)
  dict_Stocks_worth[key] = sum(a)
#print(dict_Stocks_worth)

import plotly.express as px
df_Stocks = pd.DataFrame(list(dict_Stocks_worth.items()), columns=['CustomerId', 'StocksValue'])
#print(df_Stocks)
df_Stocks = df_Stocks.sort_values(by='StocksValue', ascending=False).head(10)
#print(df_Stocks)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_Stocks, x='CustomerId', y='StocksValue', color='StocksValue', labels={'StocksValue': 'StocksValue'})
fig.update_layout(title='Stocks Value of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Stocks Value',
                  xaxis={'type': 'category'})

st.plotly_chart(fig,use_container_width=True)

# determine worth of FDs
import pandas as pd
dict_FD_worth={}
df_FD=pd.read_excel('fixed_deposits.xlsx')
b = df_FD['INVESTMENTACCOUNTID'].tolist()
for key in dict_FD:
  a=[]
  for i in dict_FD[key]:
    maturityamount=0
    if (not df_FD[df_FD['INVESTMENTACCOUNTID'] == i].isnull().values.any()) and  (not df_FD[df_FD['INVESTMENTACCOUNTID'] == i].empty):
        for index,value in enumerate(df_FD[df_FD['INVESTMENTACCOUNTID'] == i]['MATURITYAMOUNT'].tolist()):

          maturityamount=maturityamount+(df_FD[df_FD['INVESTMENTACCOUNTID'] == i]['MATURITYAMOUNT'].values[index])
  a.append(maturityamount)



  dict_FD_worth[key] = sum(a)
#print(dict_FD_worth)

import plotly.express as px
df_FD = pd.DataFrame(list(dict_FD_worth.items()), columns=['CustomerId', 'FixedDeposit'])
#print(df_FD)
df_FD = df_FD.sort_values(by='FixedDeposit', ascending=False).head(10)
#print(df_FD)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_FD, x='CustomerId', y='FixedDeposit', color='FixedDeposit', labels={'FixedDeposit': 'FixedDeposit'})
fig.update_layout(title='FixedDeposit Value of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Fixed Deposit Value',
                  xaxis={'type': 'category'})

st.plotly_chart(fig,use_container_width=True)

#plot_top_right()

# determine account balance,ACCOUNTBALANCE
import pandas as pd
dict_account_worth={}
df_AC=pd.read_excel('accounts.xlsx')
#b = df_FD['INVESTMENTACCOUNTID'].tolist()
b=df_AC['CUSTOMERID'].tolist()
#df_AC['ACCOUNTBALANCE']
for idx,value in enumerate(b):
  if not dict_account_worth.get(value,''):

    dict_account_worth[value]= df_AC['ACCOUNTBALANCE'].values[idx]
  else:
    dict_account_worth[value]= dict_account_worth[value]+df_AC['ACCOUNTBALANCE'].values[idx]



#print(dict_account_worth)

import plotly.express as px
df_account = pd.DataFrame(list(dict_account_worth.items()), columns=['CustomerId', 'AccountBalance'])
#print(df_account)
df_account = df_account.sort_values(by='AccountBalance', ascending=False).head(10)
#print(df_account)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_account, x='CustomerId', y='AccountBalance', color='AccountBalance', labels={'AccountBalance': 'AccountBalance'})
fig.update_layout(title='AccountBalance of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Account Balance',
                  xaxis={'type': 'category'})

##loan amount
st.plotly_chart(fig,use_container_width=True)

#plot_top_left()


import pandas as pd
dict_loan_worth={}
df_LN=pd.read_excel('loans.xlsx')
#b = df_FD['INVESTMENTACCOUNTID'].tolist()
b=df_LN['CUSTOMERID'].tolist()
#df_AC['ACCOUNTBALANCE']
for idx,value in enumerate(b):
  if not dict_loan_worth.get(value,''):

    dict_loan_worth[value]= df_LN['LOANAMOUNT'].values[idx]
  else:
    dict_loan_worth[value]= dict_loan_worth[value]+df_LN['LOANAMOUNT'].values[idx]
#print(dict_loan_worth)

import plotly.express as px
df_loan = pd.DataFrame(list(dict_loan_worth.items()), columns=['CustomerId', 'Loans'])
#print(df_loan)
df_loan = df_loan.sort_values(by='Loans', ascending=False).head(10)
#print(df_loan)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_loan, x='CustomerId', y='Loans', color='Loans', labels={'Loans': 'Loans'})
fig.update_layout(title='Loans of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Loan Value',
                  xaxis={'type': 'category'})

st.plotly_chart(fig,use_container_width=True)

#plot_bottom_left()
                  

total_net_worth={}
cust_IdList = df_IA['CUSTOMERID'].tolist()
#cust_IdList = cust_IdList.remove(1193).tolist()
for i in cust_IdList:

  total_net_worth[i]=0
  if  dict_MF_worth.get(i,''):

    total_net_worth[i]=total_net_worth[i]+float(dict_MF_worth[i])


  if  dict_Stocks_worth.get(i,''):
    total_net_worth[i] = total_net_worth[i]+float(dict_Stocks_worth[i]);

  if  dict_FD_worth.get(i,''):
    total_net_worth[i] = total_net_worth[i]+float(dict_FD_worth[i]);




  if  dict_account_worth.get(i,''):
    total_net_worth[i] = total_net_worth[i]+float(dict_account_worth[i]);

  if  dict_loan_worth.get(i,''):
    total_net_worth[i] = total_net_worth[i]-float(dict_loan_worth[i]);

  total_net_worth[i] = round( total_net_worth[i],2)
#print(total_net_worth)

import plotly.express as px
df = pd.DataFrame(list(total_net_worth.items()), columns=['CustomerId', 'NetWorth'])
#print(df)
df_sorted = df.sort_values(by='NetWorth', ascending=False).head(10)
#print(df_sorted)
#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth',title="Top 10 Networth Investors",
#category_orders={"CustomerIds": df_sorted['CustomerId'].tolist(),"NetWorth": df_sorted['NetWorth'].tolist()})

#fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', title='Customer Net Worth', labels={'CustomerId': 'Customer IDs', 'NetWorth': 'Net Worth'},color='NetWorth', color_continuous_scale='viridis')

fig = px.bar(df_sorted, x='CustomerId', y='NetWorth', color='NetWorth', labels={'NetWorth': 'Net Worth'})
fig.update_layout(title='Net Worth of Customers',
                  xaxis_title='Customer ID',
                  yaxis_title='Net Worth',
                  xaxis={'type': 'category'})



#fig.show()
st.plotly_chart(fig,use_container_width=True)

#plot_bottom_left()



# dataset_MF = df_IA.loc[df_IA['ACCOUNTTYPE']== 'Mutual Funds']
# dataset_Stocks = df_IA.loc[df_IA['ACCOUNTTYPE']=='Stocks']
# dataset_FD = df_IA.loc[df_IA['ACCOUNTTYPE']=='Fixed Deposits']

# Investment_Duration_Range = ['1-6 months','6-12 months','1-2 years','2-3 years','3-4 years','4-5 years']
# Investments=['MF','Stocks','FD']
# print(dataset_MF.head())

## find all investment account ids, returns,investment type from investment accounts for a given customer id

##{cid:[Id1,IId2]}
##{Id1:'Stocks','returns%'}



